#Statements for user DAO
insertNewUser=INSERT INTO users \
                (first_name, last_name, login, password, role) \
                VALUES(?, ?, ?, ?, ?);
getUserByLogin=SELECT * FROM users \
                 WHERE login = ?;
getAuthorizationData=SELECT password, role FROM users \
                        WHERE login = ?
getUsersByRole=SELECT * \
                 FROM users \
                 WHERE role = ? \
                 ORDER BY first_name, last_name;
#Statements for theme DAO
createTheme=INSERT INTO themes \
              (name) \
               VALUES (?);
deleteTheme=DELETE FROM themes \
            WHERE id = ?;
findAllThemes=SELECT * \
              FROM themes \
              ORDER BY name;
#Statements for course DAO
findCourseNameById = SELECT name \
                     FROM courses \
                     WHERE id = ?;
createCourse=INSERT INTO courses \
               (name, start_date, end_date, theme_id, description) \
                VALUES (?, ?, ?, ?, ?);
createCourseWithTutor=INSERT INTO courses \
               (name, start_date, end_date, theme_id, description, tutor_id) \
                VALUES (?, ?, ?, ?, ?, ?);
updateCourse = UPDATE courses \
               SET name = ?,\
               start_date = ?, \
               end_date = ?,\
               theme_id = ?, \
               description = ? \
               WHERE id = ?;
updateCourseWithTutor = UPDATE courses \
               SET name = ?, \
               start_date = ?, \
               end_date = ?, \
               theme_id = ?, \
               description = ?, \
               tutor_id = ? \
               WHERE id = ?;

findCourseById=SELECT c.id,\
                    c.name, \
                    c.start_date, \
                    c.end_date, \
                    c.description, \
                    t.name theme_name, \
                    t.id theme_id, \
                    u.first_name, \
                    u.last_name, \
                    u.login, \
                    u.id user_id \
                FROM \
                    courses c \
                    LEFT JOIN users u ON c.tutor_id = u.id \
                    INNER JOIN themes t ON c.theme_id = t.id \
                WHERE c.id = ? \
                ORDER BY LENGTH(theme_name), theme_name;
findAllCourses=SELECT c.id, c.name, \
                 c.start_date, c.end_date, c.description, \
                 t.name theme_name, t.id theme_id, \
                 u.first_name, u.last_name, u.login, u.id user_id FROM  \
                    courses c LEFT JOIN users u \
                    ON c.tutor_id = u.id \
                        INNER JOIN themes t \
                        ON c.theme_id = t.id \
                        ORDER BY LENGTH(theme_name), theme_name;
countCourses=SELECT COUNT(*) FROM courses;
getPageSortedByThemeName=SELECT c.id, c.name, \
                 c.start_date, c.end_date, c.description, \
                 t.name theme_name, t.id theme_id, \
                 u.first_name, u.last_name, u.login, u.id user_id  FROM  \
                    courses c LEFT JOIN users u \
                    ON c.tutor_id = u.id \
                        INNER JOIN themes t \
                        ON c.theme_id = t.id \
                        ORDER BY LENGTH(theme_name), theme_name \
                        LIMIT ?, ?;
deleteCourseById = DELETE \
                        FROM courses \
                        WHERE id = ?;
